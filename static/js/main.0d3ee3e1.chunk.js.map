{"version":3,"sources":["ApiQueries.js","pages/SportCalendar.js","pages/Main.js","components/Timer.js","pages/Workout.js","pages/Choose.js","pages/Completion.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","UserId","a","axios","post","newUser","data","SberId","get","params","users","groups","GroupId","group_id","exircises","date","Completed","newProgress","progress","user_id","ach","getAllGroupsExercises","getExircicesfromGroup","getUsersBySberId","getProgressByUser","createProgressAchieve","createUser","getAchiviesFomUser","withRouter","userId","digit","useEffect","ApiQueries","dates_new","console","log","forEach","element","push","Date","parse","setSelectedDates","getData","useState","selectedDates","modifiers","selected","some","selectedDate","isSameDay","locale","ru","setGroupId","ToChooseCateg","achieves","setName","setDescription","setAchieves","getUserAchieves","style","display","justifyContent","width","compact","content","right","marginTop","to","textDecoration","onClick","left","flexDirection","marginRight","size","text","color","primary","dict","view","count_days_train","count_train","format","time","minutes","Math","floor","seconds","padTime","customStyles","backgroundColor","background","backgroundImage","gradient","top","bottom","transform","borderRadius","padding","Timer","subtitle","setIter","timeCount","iter","workoutLength","assistant","setWorkOutStartet","history","useHistory","React","modalIsOpen","setIsOpen","counter","setCounter","counterRest","setCounterRest","timer","setTimeout","c","current","sendData","action","action_id","parameters","clearTimeout","isOpen","onAfterOpen","ref","_subtitle","textAlign","String","length","options","year","month","day","timezone","groupId","workoutExercises","setWorkoutExercises","description","name","workOutStarted","iterChanged","assistantType","workoutsEx","fetchCategoriesAndSetCategories","undefined","sayExircise","discription","discriptionJoy","off_title","title","off_description","number","marginBottom","toLocaleString","map","i","_id","trainingName","accent","class","src","photo","lines","scaleOnInteraction","outlined","fullWidth","disabled","tabIndex","workouts","workout","carouselIndex","setCarouselIndex","Row","as","axis","index","scrollSnapType","detectActive","detectThreshold","stylingCallback","itemEl","slot","opacity","abs","stylingResetCallback","onIndexChange","paddingStart","paddingEnd","paddingTop","paddingBottom","short_description","image","key","height","margin","scaleOnFocus","focused","backgroundSize","backgroundRepeat","workouts_wxircices_names","alert","AppStyled","styled","div","body1","TypoScale","createGlobalStyle","sberBox","ThemeBackgroundEva","darkEva","ThemeBackgroundSber","darkSber","ThemeBackgroundJoy","darkJoy","DocStyles","character","setCharacter","useRef","state","notes","setUserId","setIterChanged","ChangePage","page","ChooseTrain","train_name","charAt","toUpperCase","slice","trim","flag","startTraining","changeExir","type","dispatchAssistantAction","id","getState","state_","item_selector","items","getStateForAssistant","createAssistant","on","event","sub","SendDataToAssistant","TochooseCat","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0d3ee3e1.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"https://bodroe-ytro-2803.herokuapp.com/\";\r\nasync function createSberId(SberId) {\r\n  const { data: newSberId } = await axios.post(`${API_URL}SberId/`, {\r\n    SberId,\r\n  });\r\n  return newSberId;\r\n}\r\n\r\nasync function createUser(UserId) {\r\n  //alert(UserId)\r\n  const { data: newUser } = await axios.post(`${API_URL}User/?user_id=${UserId}`);\r\n  // , {\r\n  //   headers: {'Access-Control-Allow-Origin': '*'},\r\n  //   UserId: UserId,\r\n  //   SberId: 0,\r\n  //   Name: \"\",\r\n  //   Age: 0,\r\n  //   Gender: \"\",\r\n  //   Active: 0,\r\n  // });\r\n  return newUser;\r\n}\r\n\r\nasync function getUsersBySberId(SberId) {\r\n  const users = await axios.get(`${API_URL}User/`, {\r\n    params: {\r\n      SberId: SberId,\r\n    },\r\n  });\r\n  return users;\r\n}\r\n\r\nasync function createCategoryExercises(CategoryName) {\r\n  const { data: newCategory } = await axios.post(`${API_URL}ExCateg/`, {\r\n    CategoryName,\r\n  });\r\n  return newCategory;\r\n}\r\n\r\nasync function getAllCategoriesExirc() {\r\n  const categories = await axios.get(`${API_URL}ExCateg/`);\r\n  return categories;\r\n}\r\nasync function getCategoryById(CategoryId) {\r\n  const category = await axios.get(`${API_URL}ExCateg/`, {\r\n    params: {\r\n      Id: CategoryId,\r\n    },\r\n  });\r\n  return category;\r\n}\r\nasync function getAllGroupsExercises() {\r\n  const groups = await axios.get(`${API_URL}AllGroupsExercises/`);\r\n  return groups;\r\n}\r\nasync function getExircicesfromGroup(GroupId) {\r\n  const exircises = await axios.get(`${API_URL}ExircicesfromGroup/`, {\r\n    params: {\r\n      group_id: GroupId,\r\n    },\r\n  });\r\n  return exircises;\r\n}\r\n\r\nasync function createProgressAchieve(UserId, date, Completed) {\r\n  const { data: newProgress } = axios.post(`${API_URL}ProgressAchieve/?user_id=${UserId}`); \r\n  // {\r\n  //   UserId: UserId,\r\n  //   Date: date,\r\n  //   Completed: true,\r\n  // });\r\n  return newProgress;\r\n}\r\n\r\nasync function getProgressByUser(UserId) {\r\n  const progress = axios.get(`${API_URL}ProgressByUser/`, {\r\n    params: {\r\n      user_id: UserId,\r\n    },\r\n  });\r\n  return progress;\r\n}\r\n\r\nasync function getMotivationalPhrase() {\r\n  const Phrase = axios.get(`${API_URL}Phrase/`);\r\n  return Phrase;\r\n}\r\n\r\nasync function updateQuestion(id, payload) {\r\n  const { data: newQuestion } = await axios.put(`${API_URL}${id}`, payload);\r\n  return newQuestion;\r\n}\r\nasync function getAchiviesFomUser(UserId) {\r\n  const ach = axios.get(`${API_URL}AchiviesFomUser/`, {\r\n    params: {\r\n      user_id: UserId,\r\n    },\r\n  });\r\n  return ach;\r\n}\r\nexport default {\r\n  API_URL,\r\n  getAllGroupsExercises,\r\n  getExircicesfromGroup,\r\n  getUsersBySberId,\r\n  getProgressByUser,\r\n  createProgressAchieve,\r\n  createUser,\r\n  getAchiviesFomUser,\r\n};\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport { Calendar } from \"react-nice-dates\";\r\nimport \"react-nice-dates/build/style.css\";\r\nimport { ru } from \"date-fns/locale\";\r\nimport { isSameDay } from \"date-fns\";\r\nimport { Button, Container, Spinner } from \"@sberdevices/ui\";\r\nimport ApiQueries from \"../ApiQueries\";\r\n\r\nimport \"./SportCalendar.css\";\r\nconst SportCalendar = ({ userId, digit }) => {  \r\n  useEffect(() => {\r\n\r\n    const getData = async userId =>{\r\n      const data = await ApiQueries.getProgressByUser(userId);\r\n      var dates_new = []\r\n      console.log(\"Data\", data)\r\n      data.data.forEach((element) => {\r\n        dates_new.push(Date.parse(element.date))\r\n      });\r\n      setSelectedDates(dates_new)\r\n    }\r\n     getData(userId)\r\n  },[]);\r\n    const [selectedDates, setSelectedDates] = useState([])\r\n    const modifiers = {\r\n      selected: date => selectedDates.some(selectedDate => isSameDay(selectedDate, date))\r\n    }\r\n    return (\r\n      <Calendar modifiers={modifiers} locale={ru} />\r\n    )\r\n};\r\n\r\nexport default withRouter(SportCalendar);\r\n","import { Button, Container } from \"@sberdevices/ui\";\r\nimport React, { useState , useEffect} from \"react\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport {\r\n  IconCalendar,\r\n  IconAccessibility,\r\n  IconApps,\r\n  IconRefresh\r\n} from \"@sberdevices/plasma-icons\";\r\nimport ApiQueries from \"../ApiQueries\";\r\nimport { Headline3 } from \"@sberdevices/ui/components/Typography\";\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  TextBox,\r\n  TextBoxBiggerTitle,\r\n  TextBoxSubTitle,\r\n  Cell,\r\n  CellDisclosure,\r\n  CellIcon,\r\n  TextBoxTitle,\r\n  MarkedList,\r\n  Badge,\r\n  MarkedItem,\r\n  IconSettings,\r\n} from \"@sberdevices/ui\";\r\nimport { tertiary, primary, accent } from \"@sberdevices/plasma-tokens\";\r\nconst Main = ({ setGroupId, ToChooseCateg, achieves, setName, setDescription, userId,  setAchieves}) => {\r\n  useEffect(() => {\r\n    const getUserAchieves = async () => {\r\n      var ach = await ApiQueries.getAchiviesFomUser(userId);\r\n      setAchieves(ach.data);\r\n    };\r\n    getUserAchieves();\r\n  }, []);\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"space-around\"\r\n      }}\r\n    >\r\n      <Card style={{ width: \"20rem\" }}>\r\n        <CardContent compact>\r\n          <Cell\r\n            content={<TextBoxBiggerTitle>Утро начнётся с</TextBoxBiggerTitle>}\r\n            right={<span style={{ marginTop: 5 }}></span>}\r\n          />\r\n          <Link\r\n            to=\"/fastworkout\"\r\n            style={{\r\n              textDecoration: \"none\",\r\n            }}\r\n          >\r\n            <Cell\r\n              onClick={() => {\r\n                setGroupId(2);\r\n                setDescription(\"Облегченный вид утренней тренировки. Позволит размять тело без сильных нагрузок на организм.\");\r\n                setName(\"Быстрая тренировка\");\r\n              }}\r\n              left={\r\n                <CellIcon>\r\n                  <IconAccessibility />\r\n                </CellIcon>\r\n              }\r\n              content={\r\n                <TextBox>\r\n                  <TextBoxTitle>Быстрая тренировка</TextBoxTitle>\r\n                  <TextBoxSubTitle>10 мин</TextBoxSubTitle>\r\n                </TextBox>\r\n              }\r\n              right={<CellDisclosure />}\r\n            />\r\n          </Link>\r\n          <Link to=\"/choose\" style={{ textDecoration: \"none\" }}>\r\n            <Cell\r\n              left={\r\n                <CellIcon>\r\n                  <IconApps />\r\n                </CellIcon>\r\n              }\r\n              onClick={() => ToChooseCateg()}\r\n              content={\r\n                <TextBox>\r\n                  <TextBoxTitle>Меню тренировок</TextBoxTitle>\r\n                  <TextBoxSubTitle>На любой вкус</TextBoxSubTitle>\r\n                </TextBox>\r\n              }\r\n              right={<CellDisclosure />}\r\n            />\r\n          </Link>\r\n\r\n          <Link\r\n            to=\"/calendar\"\r\n            style={{\r\n              textDecoration: \"none\",\r\n            }}\r\n          >\r\n            <Cell\r\n              left={\r\n                <CellIcon>\r\n                  <IconCalendar />\r\n                </CellIcon>\r\n              }\r\n              content={\r\n                <TextBox>\r\n                  <TextBoxTitle>Календарь</TextBoxTitle>\r\n                  <TextBoxSubTitle>Отображение прогресса</TextBoxSubTitle>\r\n                </TextBox>\r\n              }\r\n              right={<CellDisclosure />}\r\n            />\r\n          </Link>\r\n        </CardContent>\r\n      </Card>\r\n      <div style={{ flexDirection: \"column\" }}>\r\n        <br /> <br />\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <Headline3 style={{ marginRight: \"0.5rem\", marginTop: \"0.5rem\" }}>\r\n            Статистика\r\n          </Headline3>\r\n          <Button\r\n            size=\"s\"\r\n            onClick={() => {\r\n              const getUserAchieves = async () => {\r\n                var ach = await ApiQueries.getAchiviesFomUser(userId);\r\n                setAchieves(ach.data);\r\n              };\r\n              getUserAchieves();\r\n            }}\r\n          >\r\n            <IconRefresh size=\"xs\" />\r\n          </Button>\r\n        </div>\r\n        <MarkedList>\r\n          {/* <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          > */}\r\n          <MarkedItem\r\n            text=\"дней с тренировками подряд\"\r\n            style={{ color: primary }}\r\n          >\r\n            {/* <IconEvent size=\"xs\" color={accent} /> */}\r\n            <Badge text={achieves.dict ? achieves.dict : 0} size={\"l\"} view={\"secondary\"} />\r\n          </MarkedItem>\r\n          {/* </div> */}\r\n\r\n          <MarkedItem\r\n            text=\"всего дней с тренировками\"\r\n            style={{ color: primary }}\r\n          >\r\n            {/* <IconDone size=\"xs\" color={accent} /> */}\r\n            <Badge\r\n              text={achieves.count_days_train ? achieves.count_days_train : 0}\r\n              size={\"l\"}\r\n              view={\"secondary\"}\r\n            />\r\n          </MarkedItem>\r\n\r\n          <MarkedItem text=\"общее число тренировок\" style={{ color: primary }}>\r\n            {/* <IconHeart size=\"xs\" color={accent} /> */}\r\n            <Badge text={achieves.count_train ? achieves.count_train : 0} size={\"l\"} view={\"secondary\"} />\r\n          </MarkedItem>\r\n        </MarkedList>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Main);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Modal from \"react-modal\";\r\nimport { text, background, gradient } from \"@sberdevices/plasma-tokens\";\r\nimport { Button } from \"@sberdevices/ui\";\r\nimport { IconHouse } from \"@sberdevices/plasma-icons\";\r\nimport \"./Modal.css\";\r\nimport ApiQueries from \"../ApiQueries\";\r\n\r\nimport { Headline2 } from \"@sberdevices/ui/components/Typography\";\r\nimport { BrowserRouter as Router, useHistory } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nconst format = (time) => {\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time % 60;\r\n  return `${minutes}:${padTime(seconds)}`;\r\n};\r\nconst customStyles = {\r\n  content: {\r\n    color: `${text}`,\r\n    backgroundColor: `${background}`,\r\n    backgroundImage: `${gradient}`,\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    borderRadius: \"1em\",\r\n    padding: \"1em\",\r\n  },\r\n};\r\n\r\nexport const Timer = ({\r\n  setIter,\r\n  timeCount,\r\n  iter,\r\n  workoutLength,\r\n  assistant,\r\n  userId,\r\n  setWorkOutStartet\r\n}) => {\r\n  const history = useHistory();\r\n\r\n  var subtitle;\r\n  const [modalIsOpen, setIsOpen] = React.useState(false);\r\n  function openModal() {\r\n    setIsOpen(true);\r\n  }\r\n  function afterOpenModal() {\r\n    subtitle.style.color = \"\";\r\n    setCounterRest(30);\r\n  }\r\n\r\n  function closeModal() {\r\n    setIsOpen(false);\r\n  }\r\n  const [counter, setCounter] = React.useState(timeCount.timeCount);\r\n  const [counterRest, setCounterRest] = React.useState(30);\r\n  React.useEffect(() => {\r\n    console.log(\"Верхний юз\");\r\n\r\n    setCounter(timeCount.timeCount);\r\n  }, [timeCount]);\r\n  React.useEffect(() => {\r\n    let timer;\r\n    if (counter > 0) {\r\n      timer = setTimeout(() => setCounter((c) => c - 1), 1000);\r\n    } else if (iter + 1 === workoutLength) {\r\n      const getUserAchieves = async () => {\r\n        await ApiQueries.createProgressAchieve(userId, new Date(), true);\r\n      };\r\n      getUserAchieves();\r\n      assistant.current?.sendData({\r\n        action: { action_id: \"train_finish\", parameters: {} },\r\n      });\r\n      setIter(iter + 1);\r\n    } else if (counter === 0) {\r\n      setIsOpen(true);\r\n    }\r\n    return () => {\r\n      if (timer) {\r\n        clearTimeout(timer);\r\n      }\r\n    };\r\n  }, [counter]);\r\n  React.useEffect(() => {\r\n    let timer;\r\n    if (counterRest > 0) {\r\n      timer = setTimeout(() => setCounterRest((c) => c - 1), 1000);\r\n    } else if (counter === 0) {\r\n      setIsOpen(false);\r\n      setIter(iter + 1);\r\n      setCounter(timeCount);\r\n    }\r\n    return () => {\r\n      if (timer) {\r\n        clearTimeout(timer);\r\n      }\r\n    };\r\n  }, [counterRest]);\r\n  return (\r\n    <div>\r\n      {counter !== 0 && <Headline2>Время: {format(counter)}</Headline2>}\r\n      <div>\r\n        <Modal\r\n          isOpen={modalIsOpen}\r\n          onAfterOpen={afterOpenModal}\r\n          style={customStyles}\r\n        >\r\n          <h2\r\n            ref={(_subtitle) => (subtitle = _subtitle)}\r\n            style={{ textAlign: \"center\" }}\r\n          >\r\n            Отдых\r\n          </h2>\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <Headline2>Следующее упражнение через</Headline2>\r\n            <br />\r\n            {counterRest !== 0 && <Headline2>{format(counterRest)}</Headline2>}\r\n          </div>\r\n\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"space-between\",\r\n            }}\r\n          >\r\n            <Button\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n                setCounterRest(30);\r\n                history.push(\"/\");\r\n                setWorkOutStartet(false);\r\n                setIter(-1);\r\n              }}\r\n            >\r\n              <IconHouse />\r\n            </Button>\r\n\r\n            <Button\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n                setIter(iter + 1);\r\n                setCounter(timeCount);\r\n              }}\r\n            >\r\n              Продолжить\r\n            </Button>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst padTime = (time) => {\r\n  return String(time).length === 1 ? `0${time}` : `${time}`;\r\n};\r\n","import { Button } from \"@sberdevices/ui\";\r\nimport React, { useEffect } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport ApiQueries from \"../ApiQueries\";\r\n\r\nimport { primary, accent } from \"@sberdevices/plasma-tokens\";\r\nimport { Headline2 } from \"@sberdevices/ui/components/Typography\";\r\n\r\nimport { BrowserRouter as Router, useHistory } from \"react-router-dom\";\r\nimport { IconDone } from \"@sberdevices/plasma-icons\";\r\nimport { IconHouse } from \"@sberdevices/plasma-icons\";\r\n\r\nimport {\r\n  MarkedList,\r\n  MarkedItem,\r\n  Card,\r\n  CardBody,\r\n  CardContent,\r\n  TextBoxBigTitle,\r\n  TextBox,\r\n  TextBoxSubTitle,\r\n  CardParagraph1,\r\n  Spinner,\r\n} from \"@sberdevices/ui\";\r\nimport \"./Workout.css\";\r\nimport { Timer } from \"../components/Timer\";\r\n\r\nvar date = new Date();\r\nvar options = {\r\n  year: \"numeric\",\r\n  month: \"numeric\",\r\n  day: \"numeric\",\r\n  timezone: \"UTC\",\r\n};\r\n\r\nconst Workout = ({\r\n  groupId,\r\n  workoutExercises,\r\n  setWorkoutExercises,\r\n  description,\r\n  name,\r\n  userId,\r\n  workOutStarted,\r\n  setWorkOutStartet,\r\n  setAchieves,\r\n  iterChanged,\r\n  assistant,\r\n  iter,\r\n  setIter,\r\n  setGroupId,\r\n  assistantType,\r\n}) => {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const fetchCategoriesAndSetCategories = async () => {\r\n      const workoutsEx = await ApiQueries.getExircicesfromGroup(groupId);\r\n      setWorkoutExercises(workoutsEx.data);\r\n    };\r\n\r\n    fetchCategoriesAndSetCategories();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (workoutExercises[iter] != undefined) {\r\n      sayExircise(\r\n        workoutExercises[iter].discription,\r\n        workoutExercises[iter].discriptionJoy\r\n      );\r\n    }\r\n  }, [iter]);\r\n  useEffect(() => {\r\n    if (\r\n      iter + 1 == workoutExercises.length &&\r\n      iter != -1 &&\r\n      iterChanged != -1\r\n    ) {\r\n      const getUserAchieves = async () => {\r\n        await ApiQueries.createProgressAchieve(userId, new Date(), true);\r\n      };\r\n      getUserAchieves();\r\n      assistant.current?.sendData({\r\n        action: { action_id: \"train_finish\", parameters: {} },\r\n      });\r\n    }\r\n    if (iterChanged == 1) {\r\n      setIter(iter + 1);\r\n    } else if (iterChanged == 0) {\r\n      if (iter > 0) {\r\n        setIter(iter - 1);\r\n      }\r\n    }\r\n  }, [iterChanged]);\r\n\r\n  const sayExircise = (off_title, title) => {\r\n    assistant.current?.sendData({\r\n      action: {\r\n        action_id: \"say\",\r\n        parameters: {\r\n          off_description: off_title,\r\n          description: title,\r\n          number: iter,\r\n        },\r\n      },\r\n    });\r\n  };\r\n  return !workOutStarted ? (\r\n    <>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-around\",\r\n        }}\r\n      >\r\n        <div style={{ flexDirection: \"column\" }}>\r\n          <Headline2>{name}</Headline2>\r\n\r\n          {workoutExercises ? (\r\n            <MarkedList>\r\n              {workoutExercises.map(({ _id, trainingName  }, i) => (\r\n                <MarkedItem text={trainingName } style={{ color: primary }}>\r\n                  <IconDone size=\"xs\" color={accent} />\r\n                </MarkedItem>\r\n              ))}\r\n            </MarkedList>\r\n          ) : (\r\n            <Spinner />\r\n          )}\r\n          <br />\r\n        </div>\r\n        <div style={{ flexDirection: \"column\" }}>\r\n          <Card style={{ width: \"20rem\" }}>\r\n            <CardBody>\r\n              <CardContent>\r\n                <TextBox>\r\n                  <TextBoxBigTitle>Описание</TextBoxBigTitle>\r\n                  <CardParagraph1 style={{ marginTop: \"0.75rem\" }} lines={4}>\r\n                    {description}\r\n                  </CardParagraph1>\r\n                  <TextBoxSubTitle>Подходит для всех</TextBoxSubTitle>\r\n                </TextBox>\r\n                <br />\r\n                <Button\r\n                  onClick={() => {\r\n                    if (\r\n                      workoutExercises[0].discriptionJoy != undefined &&\r\n                      workoutExercises[0].discription != undefined\r\n                    ) {\r\n                      sayExircise(\r\n                        workoutExercises[0].discription,\r\n                        workoutExercises[0].discriptionJoy\r\n                      );\r\n                      setWorkOutStartet(true);\r\n                      setIter(iter + 1);\r\n                    }\r\n                  }}\r\n                >\r\n                  Начать\r\n                </Button>\r\n              </CardContent>\r\n            </CardBody>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </>\r\n  ) : (\r\n    <div>\r\n      <Card style={{ marginBottom: \"3rem\" }}>\r\n        <CardBody>\r\n          <CardContent>\r\n            {workoutExercises ? (\r\n              <div>\r\n                {iter == workoutExercises.length ? (\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"column\",\r\n                      justifyContent: \"space-around\",\r\n                    }}\r\n                  >\r\n                    <TextBoxBigTitle>Тренировка завершена</TextBoxBigTitle>\r\n\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-around\",\r\n                      }}\r\n                    >\r\n                      <div style={{ flexDirection: \"column\" }}>\r\n                        <CardParagraph1>\r\n                          {date.toLocaleString(\"ru\", options)}{\" \"}\r\n                        </CardParagraph1>\r\n                      </div>\r\n\r\n                      {workoutExercises ? (\r\n                        <MarkedList>\r\n                          {workoutExercises.map(({ _id, trainingName }, i) => (\r\n                            <MarkedItem text={trainingName} style={{ color: primary }}>\r\n                              <IconDone size=\"xs\" color={accent} />\r\n                            </MarkedItem>\r\n                          ))}\r\n                        </MarkedList>\r\n                      ) : (\r\n                        <Spinner />\r\n                      )}\r\n                    </div>\r\n                    <br />\r\n                    <Button\r\n                      onClick={() => {\r\n                        setWorkOutStartet(false);\r\n                        setGroupId(2);\r\n                        history.push(\"/\");\r\n                        setIter(-1);\r\n                        setWorkOutStartet(false);\r\n                      }}\r\n                    >\r\n                      <IconHouse />\r\n                    </Button>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"row\",\r\n                        justifyContent: \"space-between\",\r\n                      }}\r\n                    >\r\n                      <TextBoxBigTitle>\r\n                        {workoutExercises[iter].trainingName}\r\n                      </TextBoxBigTitle>\r\n                      <div style={{ marginTop: \"0.5rem\" }}>\r\n                        <Timer\r\n                          assistant={assistant}\r\n                          setIter={setIter}\r\n                          timeCount={{ timeCount: workoutExercises[iter].time }}\r\n                          iter={iter}\r\n                          userId={userId}\r\n                          workoutLength={workoutExercises.length}\r\n                          setAchieves={setAchieves}\r\n                          workoutExercises={workoutExercises}\r\n                          sayExircise={sayExircise}\r\n                          setWorkOutStartet={setWorkOutStartet}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-around\",\r\n                        flexDirection: \"row\",\r\n                      }}\r\n                    >\r\n                      <div class=\"wrapper exmp2\">\r\n                        <img src={workoutExercises[iter].photo} />\r\n                      </div>\r\n\r\n                      <div style={{ flexDirection: \"column\" }}>\r\n                        <CardParagraph1 lines={7}>\r\n                          {assistantType.current == \"joy\"\r\n                            ? workoutExercises[iter].discriptionJoy\r\n                            : workoutExercises[iter].discription}\r\n                        </CardParagraph1>\r\n                        <div\r\n                          style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"space-between\",\r\n                          }}\r\n                        >\r\n                          <Button\r\n                            view=\"primary\"\r\n                            size=\"s\"\r\n                            scaleOnInteraction={false}\r\n                            outlined={false}\r\n                            fullWidth\r\n                            disabled={iter == 0}\r\n                            style={{ marginTop: \"1em\", marginRight: \"1em\" }}\r\n                            tabIndex={-1}\r\n                            onClick={() => {\r\n                              setIter(iter - 1);\r\n                            }}\r\n                          >\r\n                            Предыдущее\r\n                          </Button>\r\n                          <Button\r\n                            view=\"primary\"\r\n                            size=\"s\"\r\n                            scaleOnInteraction={false}\r\n                            outlined={false}\r\n                            fullWidth\r\n                            style={{ marginTop: \"1em\" }}\r\n                            tabIndex={-1}\r\n                            onClick={() => {\r\n                              if (iter + 1 == workoutExercises.length) {\r\n                                const getUserAchieves = async () => {\r\n                                  await ApiQueries.createProgressAchieve(\r\n                                    userId,\r\n                                    new Date(),\r\n                                    true\r\n                                  );\r\n                                  var ach = await ApiQueries.getAchiviesFomUser(\r\n                                    userId\r\n                                  );\r\n                                  setAchieves(ach.data);\r\n                                };\r\n                                getUserAchieves();\r\n                                assistant.current?.sendData({\r\n                                  action: {\r\n                                    action_id: \"train_finish\",\r\n                                    parameters: {},\r\n                                  },\r\n                                });\r\n                              }\r\n\r\n                              setIter(iter + 1);\r\n                            }}\r\n                          >\r\n                            Следующее\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <Spinner />\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Workout);\r\n","import { Button, Container } from \"@sberdevices/ui\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport { Row } from \"@sberdevices/ui/components/Grid/Row\";\r\nimport { Carousel, CarouselCol } from \"@sberdevices/ui\";\r\n\r\nimport ApiQueries from \"../ApiQueries\";\r\nimport {\r\n  Spinner,\r\n  Card,\r\n  CardBody,\r\n  CardContent,\r\n  TextBoxBigTitle,\r\n  TextBox,\r\n} from \"@sberdevices/ui\";\r\nimport { Headline2 } from \"@sberdevices/ui/components/Typography\";\r\nimport \"./Workout.css\";\r\n\r\nconst Choose = ({\r\n  setGroupId,\r\n  setDescription,\r\n  setName,\r\n  workouts,\r\n  assistant,\r\n}) => {\r\n  useEffect(() => {\r\n    const fetchCategoriesAndSetCategories = async () => {\r\n      const workout = await ApiQueries.getAllGroupsExercises();\r\n      workouts.current = workout;\r\n    };\r\n    fetchCategoriesAndSetCategories();\r\n  }, []);\r\n  const [carouselIndex, setCarouselIndex] = useState(1);\r\n  const stylingCallback = (itemEl: HTMLDivElement, slot: number) => {\r\n    itemEl.style.opacity = `${1 - Math.abs(slot) / 2}`;\r\n  };\r\n\r\n  const stylingResetCallback = (itemEl: HTMLDivElement) => {\r\n    itemEl.style.opacity = \"\";\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n        <Headline2>Выберите режим тренировки</Headline2>\r\n      </div>\r\n      <br />\r\n      <Row>\r\n        {workouts.current ? (\r\n          <Carousel\r\n            as={Row}\r\n            axis=\"x\"\r\n            index={carouselIndex}\r\n            scrollSnapType=\"mandatory\"\r\n            detectActive\r\n            detectThreshold={0.5}\r\n            stylingCallback={stylingCallback}\r\n            stylingResetCallback={stylingResetCallback}\r\n            onIndexChange={(i) => setCarouselIndex(i)}\r\n            paddingStart=\"50%\"\r\n            paddingEnd=\"50%\"\r\n            style={{ paddingTop: \"1rem\", paddingBottom: \"1.25rem\" }}\r\n          >\r\n            {workouts.current.data.map(\r\n              ({ name, short_description, description, image }, i) => (\r\n                <CarouselCol key={`item:${i}`}>\r\n                  <Card\r\n                    style={{\r\n                      width: \"10rem\",\r\n                      height: \"12rem\",\r\n                      margin: \"0.3rem\",\r\n                    }}\r\n                    scaleOnFocus={false}\r\n                    focused={i == carouselIndex}\r\n                  >\r\n                    <CardBody>\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          backgroundSize: \"cover\",\r\n                          backgroundRepeat: \"no-repeat\",\r\n\r\n                          backgroundImage: `url(${image})`,\r\n                        }}\r\n                      ></div>\r\n\r\n                      <CardContent>\r\n                        <TextBox>\r\n                          <TextBoxBigTitle>{name}</TextBoxBigTitle>\r\n                        </TextBox>\r\n\r\n                        <Link\r\n                          style={{\r\n                            color: \"#FFF\",\r\n                            textDecoration: \"none\",\r\n                          }}\r\n                          to=\"/fastworkout\"\r\n                        >\r\n                          <Button\r\n                            view=\"primary\"\r\n                            size=\"s\"\r\n                            scaleOnInteraction={false}\r\n                            outlined={false}\r\n                            fullWidth\r\n                            style={{ marginTop: \"1em\" }}\r\n                            tabIndex={-1}\r\n                            onClick={() => {\r\n                              console.log(workouts.data);\r\n                              assistant.current.sendData({\r\n                                action: {\r\n                                  action_id: \"after_choose_train\",\r\n                                  parameters: {},\r\n                                },\r\n                              });\r\n                              setGroupId(i + 1);\r\n                              setDescription(description);\r\n                              setName(name);\r\n                            }}\r\n                          >\r\n                            Выбрать\r\n                          </Button>\r\n                        </Link>\r\n                      </CardContent>\r\n                    </CardBody>\r\n                  </Card>\r\n                </CarouselCol>\r\n              )\r\n            )}\r\n          </Carousel>\r\n        ) : (\r\n          <Spinner />\r\n        )}\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withRouter(Choose);\r\n","import { Button, Container, TextField } from \"@sberdevices/ui\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport ApiQueries from \"../ApiQueries\";\r\n\r\nimport { tertiary, primary, accent } from \"@sberdevices/plasma-tokens\";\r\nimport {\r\n  body1,\r\n  Display3,\r\n  Headline3,\r\n  Body1,\r\n  Body3,\r\n  Body2,\r\n} from \"@sberdevices/ui/components/Typography\";\r\nimport { Headline2 } from \"@sberdevices/ui/components/Typography\";\r\n\r\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport { BrowserRouter as Router, useHistory } from \"react-router-dom\";\r\nimport { IconDone, IconLock } from \"@sberdevices/plasma-icons\";\r\nimport { IconHouse } from \"@sberdevices/plasma-icons\";\r\n\r\nimport {\r\n  MarkedList,\r\n  MarkedItem,\r\n  Card,\r\n  CardBody,\r\n  CardMedia,\r\n  CardContent,\r\n  TextBoxBigTitle,\r\n  TextBoxBiggerTitle,\r\n  TextBox,\r\n  TextBoxSubTitle,\r\n  CardParagraph1,\r\n  CardHeadline1,\r\n  Spinner,\r\n} from \"@sberdevices/ui\";\r\nimport \"./Workout.css\";\r\nimport { Timer } from \"../components/Timer\";\r\nconst renderTime = ({ remainingTime }) => {\r\n  if (remainingTime === 0) {\r\n    return <div className=\"timer\">Стоп</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      {/* <div className=\"text\">Remaining</div> */}\r\n      <div className=\"value\">{remainingTime}</div>\r\n      {/* <div className=\"text\">seconds</div> */}\r\n    </div>\r\n  );\r\n};\r\nvar date = new Date();\r\nvar options = {\r\n  year: \"numeric\",\r\n  month: \"numeric\",\r\n  day: \"numeric\",\r\n  timezone: \"UTC\",\r\n};\r\n\r\nconst Completion = ({\r\n  groupId,\r\n  workoutExercises,\r\n  setWorkoutExercises,\r\n  description,\r\n  name,\r\n  userId,\r\n  workOutStarted,\r\n  setWorkOutStartet,\r\n  setAchieves,\r\n  iterChanged,\r\n  assistant,\r\n  iter,\r\n  setIter,\r\n  setGroupId,\r\n  assistantType,\r\n  history,\r\n  workouts_wxircices_names\r\n}) => {\r\n    useEffect(() => {\r\n         const fetchCategoriesAndSetCategories = async () => {\r\n           const workoutsEx = await ApiQueries.getExircicesfromGroup(groupId);\r\n           setWorkoutExercises(workoutsEx.data);\r\n         };\r\n    \r\n         fetchCategoriesAndSetCategories();\r\n         console.log(\"Workout useeffect\");\r\n        alert(iter)\r\n        alert(workoutExercises)\r\n      }, []);\r\n  return  (\r\n    <div>\r\n      {/* <Button\r\n        onClick={() => {\r\n          setWorkOutStartet(false);\r\n        }}\r\n      >\r\n        Закончить\r\n      </Button>\r\n      <Button\r\n        onClick={() => {\r\n          history.push(\"/\");\r\n        }}\r\n      >\r\n        На главную\r\n      </Button> */}\r\n\r\n      <Card style={{ marginBottom: \"3rem\" }}>\r\n        <CardBody>\r\n          <CardContent>\r\n              <div>\r\n                {true ? (\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"column\",\r\n                      justifyContent: \"space-around\",\r\n                    }}\r\n                  >\r\n                    <TextBoxBigTitle>Тренировка завершена</TextBoxBigTitle>\r\n\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-around\",\r\n                      }}\r\n                    >\r\n                      <div style={{ flexDirection: \"column\" }}>\r\n                        <CardParagraph1>\r\n                          {date.toLocaleString(\"ru\", options)}{\" \"}\r\n                        </CardParagraph1>\r\n                        {/* <TextBoxSubTitle>Время выполнения</TextBoxSubTitle> */}\r\n                      </div>\r\n\r\n                      {workouts_wxircices_names.current ? (\r\n                        <MarkedList>\r\n                          {workouts_wxircices_names.current.map(({ _id, name }, i) => (\r\n                            <MarkedItem text={name} style={{ color: primary }}>\r\n                              <IconDone size=\"xs\" color={accent} />\r\n                            </MarkedItem>\r\n                          ))}\r\n                        </MarkedList>\r\n                      ) : (\r\n                        <Spinner />\r\n                      )}\r\n                    </div>\r\n                    <br />\r\n                    <Button\r\n                      onClick={() => {\r\n                        setWorkOutStartet(false);\r\n                        setIter(-1);\r\n                        setGroupId(2);\r\n                        history.push(\"/\");\r\n                      }}\r\n                    >\r\n                      <IconHouse />\r\n                    </Button>\r\n                  </div>\r\n            ):(<Spinner></Spinner>)};\r\n            </div>\r\n          </CardContent>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default withRouter(Completion);","import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./App.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { AssistantCharacterType } from \"@sberdevices/assistant-client\";\r\nimport { darkJoy, darkEva, darkSber } from \"@sberdevices/plasma-tokens/themes\";\r\nimport { text, background, gradient } from \"@sberdevices/plasma-tokens\";\r\nimport { Container } from \"@sberdevices/ui\";\r\n\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport styled from \"styled-components\";\r\nimport { sberBox } from \"@sberdevices/plasma-tokens/typo\";\r\nimport SportCalendar from \"./pages/SportCalendar\";\r\nimport { body1 } from \"@sberdevices/ui/components/Typography\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Main from \"./pages/Main\";\r\nimport Workout from \"./pages/Workout\";\r\nimport ApiQueries from \"./ApiQueries\";\r\nimport Choose from \"./pages/Choose\";\r\nimport Completion from \"./pages/Completion\";\r\nimport { useHistory, withRouter } from \"react-router-dom\";\r\nimport {\r\n  createSmartappDebugger,\r\n  createAssistant,\r\n  AssistantAppState,\r\n} from \"@sberdevices/assistant-client\";\r\nimport { set } from \"date-fns\";\r\nimport { Spinner } from \"@sberdevices/ui\";\r\n\r\nconst AppStyled = styled.div`\r\n  padding: 30px;\r\n  ${body1}\r\n`;\r\nconst TypoScale = createGlobalStyle(sberBox);\r\nconst ThemeBackgroundEva = createGlobalStyle(darkEva);\r\nconst ThemeBackgroundSber = createGlobalStyle(darkSber);\r\nconst ThemeBackgroundJoy = createGlobalStyle(darkJoy);\r\n\r\nconst DocStyles = createGlobalStyle`\r\n  html {\r\n    color: ${text};\r\n    background-color: ${background};\r\n    background-image: ${gradient};\r\n    min-height: 100vh;\r\n  }\r\n`;\r\n\r\nconst initializeAssistant = (getState /*: any*/) => {\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    return createSmartappDebugger({\r\n      token:\r\n        \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2MTcwMTM5MzAsImV4cCI6MTYxNzEwMDMzMCwidHlwZSI6IkJlYXJlciIsImp0aSI6ImU1ZDYyODhlLTYxNjUtNDY1OS04MmNiLTllZTI3YzM2NWU1MCIsInN1YiI6IjdkMTM4N2FhY2RiYjY0ZTMwNTE3ODQ3ZGVhNzgwMDNmMTA4NjE1YmNlZGIzNTlmYjhmNWJiMWVkOGI0OTU3ZmM1MzliZTkyNzAwNDI2Mjk4IiwiYXVkIjoiVlBTIn0.TwTrLM3Tb7qZ_3ffWKi3W-vgS0p9lVPmg8Av-aqEPSOMYk9RivAlLcx0vX2LjDZRM0aM4wi7oHCayJXqnSu7DF9SSaHgQ-xPgwJAkjOhn_Gg91kqxkRUczWXND810D_vY871nh1WgMNBkiGeRLEECBBvgAR90sRvjeoIkkeR9N4nzpzGR4Rn55G-4F1IPIVUM8SI_NmhZtqx1_HpuAhMfLnmnnhHfhcxQIId3BJJEMDxH-Kqv8N5J6z1Mec_mo5NHZUJTxt8CK2L7zWwfi3zgZVNaWv6kZVcQ31nSxXEgl5lcsMf0bgcAZYWSgVnnBCPDnfArR7LnI5Akh2uPLvxZthgrDnEhLvWcxBVNdUN-Y5YD3aEvgf_tIvj2gd6c6vZReYC94b7bpsoVcI_C7j0IAp-c044qw6HXoxIWUdp9aC8rpNrs8SRIGSjqy-XCqyNfDmy9TFpdauWpBuJ55jj7j63kAHtMggz4pCCDDLiCU3PBeQ1mNEJGHocx7iWAfHXbQ0TZ5ZIBc0_3Bmm4sB_Ey_AVzlIWKYk31YYyGkjGKt2Kso72DRrrBxe4fkc3j0Zr0FQRle9Y0oyP4KqXM7i8nMNrKWa8hG3QUbolLl3_Q5LhYOyXTFjaeL5hrazgYV3gfNYcpaze355k02m_p1-9Ltnt3xItkFfmoQso31Sj3o\" ??\r\n        \"\",\r\n      initPhrase: `Запусти тест бодрое утро`,\r\n      getState,\r\n    });\r\n  }\r\n  return createAssistant({ getState });\r\n};\r\n\r\nfunction App() {\r\n  const [character, setCharacter] = useState(\"sber\");\r\n\r\n  var assistant = useRef();\r\n  var workouts = useRef();\r\n  var assistantType = useRef();\r\n  var workouts_wxircices_names = useRef();\r\n  var state = {\r\n    notes: [],\r\n  };\r\n  //const [workouts, setWorkouts] = useState([]);\r\n\r\n  const [workoutExercises, setWorkoutExercises] = useState([]);\r\n  const [iter, setIter] = useState(-1);\r\n  const [userId, setUserId] = useState([]);\r\n  const [workOutStarted, setWorkOutStartet] = useState(false);\r\n  const [iterChanged, setIterChanged] = useState(-1);\r\n  const [digit, setDigit] = useState(-1);\r\n  const [carouselIndex, setCarouselIndex] = useState(1);\r\n  //const [assistantType, setAssistantType] = useState(\"\");\r\n  const getStateForAssistant = () => {\r\n    console.log(\"getStateForAssistant: this.state:\", state);\r\n    const state_ = {\r\n      item_selector: {\r\n        items: state.notes.map(({ id, title }, index) => ({\r\n          number: index + 1,\r\n          id,\r\n          title,\r\n        })),\r\n      },\r\n    };\r\n    console.log(\"getStateForAssistant: state:\", state);\r\n    return state_;\r\n  };\r\n\r\n\r\n  const ChangePage = async (page) => {\r\n    switch (page) {\r\n      case \"Calendar\":\r\n        history.push(\"/calendar\");\r\n        break;\r\n      case \"fastworkout\":\r\n        history.push(\"/calendar\");\r\n        break;\r\n      case \"choose_training\":\r\n        history.push(\"/choose\");\r\n        break;\r\n      case \"fast_training\":\r\n        history.push(\"/fastworkout\");\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const history = useHistory();\r\n  const ChooseTrain = (train_name) => {\r\n    train_name =\r\n      train_name.charAt(0).toUpperCase() + train_name.slice(1).trim();\r\n    console.log(\"WK\", workouts.current);\r\n    let flag =true;\r\n    if (workouts.current.data != undefined) {\r\n      workouts.current.data.map(({ _id, name, discription }, i) => {\r\n        console.log(\"name\", name);\r\n        console.log(\"train_name\", train_name);\r\n        if (train_name == name.trim()) {\r\n          //setWorkOutStartet(false)\r\n          assistant.current.sendData({\r\n            action: { action_id: \"after_choose_train\", parameters: {} },\r\n          });\r\n          flag=false;\r\n          console.log(\"i\", i);\r\n          console.log(\"name\", name);\r\n          setGroupId(i + 1);\r\n          setName(name);\r\n          setDescription(discription);\r\n          history.push(\"/fastworkout\");\r\n        }\r\n\r\n      });\r\n     if(flag){\r\n      assistant.current.sendData({\r\n        action: { action_id: \"bad_train_category\", parameters: {} },\r\n      });\r\n     }\r\n    }\r\n  };\r\n\r\n  const startTraining = async () => {\r\n    setIter(0);\r\n    setWorkOutStartet(true);\r\n  };\r\n  const changeExir = async (type) => {\r\n    switch (type) {\r\n      case \"next\":\r\n        setIterChanged(1);\r\n        break;\r\n      case \"previous\":\r\n        setIterChanged(0);\r\n        break;\r\n    }\r\n\r\n    setIterChanged(-1);\r\n  };\r\n\r\n  const dispatchAssistantAction = async (action) => {\r\n    console.log(\"dispatchAssistantAction\", action);\r\n    if (action) {\r\n      switch (action.type) {\r\n        case \"character\":\r\n          setCharacter(action.character.id);\r\n          // 'sber' | 'eva' | 'joy';\r\n          break;\r\n        case \"show_calendar\":\r\n          ChangePage(\"Calendar\");\r\n          break;\r\n        case \"to_fast_training\":\r\n          setGroupId(2)\r\n          ChangePage(\"fast_training\");\r\n          break;\r\n        case \"to_choose_training\":\r\n          ChangePage(\"choose_training\");\r\n          break;\r\n        case \"choose_train\":\r\n          ChooseTrain(action.data);\r\n          break;\r\n        case \"start_train\":\r\n          startTraining();\r\n          break;\r\n        case \"next_exircise\":\r\n          changeExir(\"next\");\r\n          break;\r\n        case \"previous_exircise\":\r\n          changeExir(\"previous\");\r\n          break;\r\n        case \"to_main\":\r\n          history.push(\"/\");\r\n          setWorkOutStartet(false);\r\n          setIter(-1);\r\n          break;\r\n        case \"move_left\":\r\n          if(carouselIndex>0){\r\n           setCarouselIndex(carouselIndex-1)\r\n          }\r\n          break;\r\n        case \"move_right\":\r\n          if(carouselIndex<workouts.current.data.length){\r\n           setCarouselIndex(carouselIndex+1)\r\n          }\r\n          break;\r\n        case \"update_stat\":\r\n          const getUserAchieves = async () => {\r\n            var ach = await ApiQueries.getAchiviesFomUser(userId);\r\n            setAchieves(ach.data);\r\n          };\r\n          getUserAchieves();\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n  const [achieves, setAchieves] = useState([]);\r\n\r\n  useEffect(() => {\r\n    assistant.current = initializeAssistant(() => getStateForAssistant());\r\n    assistant.current.on(\"start\", (event) => {\r\n      console.log(`assistant.on(start)`, event);\r\n    });\r\n\r\n    assistant.current.on(\r\n      \"data\",\r\n      (event /*: any*/) => {\r\n        if (event.type == \"smart_app_data\") {\r\n          console.log(\"userId\", event.user_id);\r\n          if (event.sub != undefined) {\r\n            setUserId(event.sub);\r\n            ApiQueries.createUser(event.sub);\r\n            const getUserAchieves = async () => {\r\n              var ach = await ApiQueries.getAchiviesFomUser(event.sub);\r\n              setAchieves(ach.data);\r\n            };\r\n            getUserAchieves();\r\n           // ApiQueries.createUser(userId);\r\n          } else if (event.user_id != undefined) {\r\n            setUserId(event.user_id);\r\n            ApiQueries.createUser(userId);\r\n            const getUserAchieves = async () => {\r\n              var ach = await ApiQueries.getAchiviesFomUser(event.userId);\r\n              setAchieves(ach.data);\r\n            };\r\n            getUserAchieves();\r\n          }\r\n          if(event.assistant==\"official\"){\r\n            assistantType.current=\"sber\"\r\n            setCharacter(\"sber\")\r\n          }\r\n          if(event.assistant==\"no_official\"){\r\n            assistantType.current = \"joy\"\r\n            setCharacter(\"joy\")\r\n          }\r\n        }\r\n        if (event.type == \"character\") {\r\n          assistantType.current = event.character.id\r\n        }\r\n        if(event.assistant!=undefined){\r\n          if(event.assistant == \"official\"){\r\n            assistantType.current = \"sber\"\r\n          }\r\n          else{\r\n            assistantType.current = \"joy\"\r\n          }\r\n        }\r\n        console.log(`assistant.on(data)`, event);\r\n        const { action } = event;\r\n        dispatchAssistantAction(action);\r\n      },\r\n      []\r\n    );\r\n\r\n    if (assistant.current != null) {\r\n      console.log(\"Non null, send data\");\r\n    } else {\r\n      console.log(\"Null\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchCategoriesAndSetCategories = async () => {\r\n      const workout = await ApiQueries.getAllGroupsExercises();\r\n      workouts.current = workout;\r\n    };\r\n    fetchCategoriesAndSetCategories();\r\n  }, [workouts]);\r\n\r\n  const [groupId, setGroupId] = useState(2);\r\n  const [description, setDescription] = useState(\r\n    \"Облегченный вид утренней тренировки. Позволит размять тело без сильных нагрузок на организм.\"\r\n  );\r\n  const [name, setName] = useState(\"Быстрая тренировка\");\r\n\r\n  const SendDataToAssistant = async (action) => {\r\n    assistant.current.sendData({\r\n      action: { action_id: action, parameters: {} },\r\n    });\r\n  };\r\n  const TochooseCat = async (action) => {\r\n    assistant.current.sendData({\r\n      action: { action_id: \"chooseCategory\", parameters: {} },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AppStyled>\r\n      <DocStyles />\r\n      <TypoScale />\r\n      {(() => {\r\n        switch (character) {\r\n          case \"sber\":\r\n            return <ThemeBackgroundSber />;\r\n          case \"eva\":\r\n            return <ThemeBackgroundEva />;\r\n          case \"joy\":\r\n            return <ThemeBackgroundJoy />;\r\n          default:\r\n            return;\r\n        }\r\n      })()}\r\n      {true ? (\r\n        <Switch>\r\n          <Route path=\"/Completion\">\r\n            <Completion>\r\n              workouts_wxircices_names={workouts_wxircices_names}\r\n              groupId={groupId}\r\n              description={description}\r\n              workoutExercises={workoutExercises}\r\n              setWorkoutExercises={setWorkoutExercises}\r\n              name={name}\r\n              userId={userId}\r\n              workOutStarted={workOutStarted}\r\n              setWorkOutStartet={setWorkOutStartet}\r\n              iterChanged={iterChanged}\r\n              setAchieves={setAchieves}\r\n              assistant={assistant}\r\n              iter={iter}\r\n              setIter={setIter}\r\n              setGroupId={setGroupId}\r\n              assistantType={assistantType}\r\n              history={history}\r\n            </Completion>\r\n              \r\n          </Route>\r\n          <Route path=\"/choose\">\r\n            <Choose\r\n            carouselIndex={carouselIndex}\r\n              setGroupId={setGroupId}\r\n              setDescription={setDescription}\r\n              setName={setName}\r\n              workouts={workouts}\r\n              SendDataToAssistant={SendDataToAssistant}\r\n              assistant={assistant}\r\n              carouselIndex={carouselIndex}\r\n               setCarouselIndex={setCarouselIndex}\r\n            />\r\n          </Route>\r\n          <Route path=\"/fastworkout\">\r\n            <Workout\r\n              workouts_wxircices_names={workouts_wxircices_names}\r\n              groupId={groupId}\r\n              description={description}\r\n              workoutExercises={workoutExercises}\r\n              setWorkoutExercises={setWorkoutExercises}\r\n              name={name}\r\n              userId={userId}\r\n              workOutStarted={workOutStarted}\r\n              setWorkOutStartet={setWorkOutStartet}\r\n              iterChanged={iterChanged}\r\n              setAchieves={setAchieves}\r\n              assistant={assistant}\r\n              iter={iter}\r\n              setIter={setIter}\r\n              setGroupId={setGroupId}\r\n              assistantType={assistantType}\r\n            />\r\n          </Route>\r\n          <Route path=\"/calendar\" exact>\r\n            <SportCalendar userId={userId} digit={digit} />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Main\r\n              setGroupId={setGroupId}\r\n              ToChooseCateg={TochooseCat}\r\n              achieves={achieves}\r\n              setName={setName}\r\n              setDescription={setDescription}\r\n              userId={userId}\r\n              setAchieves={setAchieves}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      ) : (\r\n        <Container>\r\n          <Spinner />\r\n        </Container>\r\n      )}\r\n    </AppStyled>\r\n  );\r\n}\r\nexport default withRouter(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}